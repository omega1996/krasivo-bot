// src/handlers/admin.ts
import TelegramBot from "node-telegram-bot-api";
import type { Message } from "node-telegram-bot-api";

import {
  ADMIN_CHAT_ID,
  API_URL,
  getCurrentModel,
  patchSettings,
} from "../config";
import { getSettings } from "../db";

import type {
  OpenAIChatCompletionRequest,
  OpenAIChatCompletionResponse,
} from "../types";
import { escapeHtml } from "../utils";
import { openai } from "../utils/openai";

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ */

import type { InlineKeyboardButton } from "node-telegram-bot-api";

async function pingModel(model: string) {
  const body: OpenAIChatCompletionRequest = {
    model,
    messages: [],
    stream: false,
  };

  const res = await fetch(`${API_URL}chat/completions`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
    },
    body: JSON.stringify(body),
    signal: AbortSignal.timeout(30000), // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  });

  if (!res.ok) {
    throw new Error(`HTTP ${res.status}: ${await res.text()}`);
  }
  const json = (await res.json()) as
    | OpenAIChatCompletionResponse
    | { error: string };

  if ("error" in json) throw new Error(json.error);
}

export async function listChatModels(): Promise<string[]> {
  const res = await openai.models.list(); // GET /v1/models
  return (
    res.data
      .map((m) => m.id)
      // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ chat-friendly –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º ¬´–≤–∏–∂—É, –Ω–æ –Ω–µ –º–æ–≥—É¬ª
      .sort((a, b) => a.localeCompare(b))
  );
}

export function chunk<T>(arr: T[], n = 2): T[][] {
  return arr.reduce<T[][]>(
    (acc, el) => {
      (acc.at(-1)?.length ?? n) < n ? acc.at(-1)!.push(el) : acc.push([el]);
      return acc;
    },
    [[]]
  );
}

export async function buildModelKeyboard(): Promise<InlineKeyboardButton[][]> {
  const ids = await listChatModels();
  return chunk(
    ids.map((id) => ({
      text: id,
      callback_data: `setModel:${id}`, // ¬´—Å–∏–≥–Ω–∞–ª¬ª –¥–ª—è callback_query
    })),
    3
  );
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ handler ‚îÄ‚îÄ */

export default function adminHandler(bot: TelegramBot) {
  bot.on("message", async (msg: Message) => {
    /* –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –∞–¥–º–∏–Ω–∞ */
    if (msg.chat.id !== ADMIN_CHAT_ID) return;

    /* ‚á¢ –æ—Ç–¥–∞–ª–∏ file_id, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–∞–π–ª/–≤–∏–¥–µ–æ */
    if (msg.video || msg.document) {
      await bot.sendMessage(
        msg.chat.id,
        `üìé file_id: <code>${escapeHtml(
          msg.video?.file_id || msg.document?.file_id || "no file"
        )}</code>`,
        { reply_to_message_id: msg.message_id, parse_mode: "HTML" }
      );
      return;
    }

    /* –¥–∞–ª—å—à–µ ‚Äî —Ä–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ */
    if (!msg.text) return;
    const text = msg.text.trim();
    if (!text.startsWith("/")) return; // –Ω–µ –∫–æ–º–∞–Ω–¥–∞

    const [cmd, ...restArr] = text.split(" ");
    const rest = restArr.join(" ").trim();

    /* ---------------------------------------------------------------- */
    /* /model */
    if (cmd === "/model") {
      if (!rest) {
        // –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        const kb = await buildModelKeyboard();
        await bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", {
          reply_markup: { inline_keyboard: kb },
          parse_mode: "HTML",
        });
        return; // –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ
      }

      /* ‚Üì –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π ¬´—Ä—É—á–Ω–æ–π¬ª —Å–ø–æ—Å–æ–±
           /model gpt-4o-mini ...
      */
      const requested = rest;
      try {
        await pingModel(requested);
        await patchSettings({ model: requested });
        await bot.sendMessage(
          msg.chat.id,
          `‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <code>${escapeHtml(requested)}</code>`,
          { reply_to_message_id: msg.message_id, parse_mode: "HTML" }
        );
      } catch (err) {
        /* ‚Ä¶ */
      }
      return;
    }

    /* ---------------------------------------------------------------- */
    /* /prompt */
    if (cmd === "/prompt") {
      const settings = await getSettings();

      if (!rest) {
        await bot.sendMessage(
          msg.chat.id,
          `‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π system prompt:\n<code>${escapeHtml(
            settings.systemPrompt
          )}</code>`,
          { reply_to_message_id: msg.message_id, parse_mode: "HTML" }
        );
        return;
      }

      await patchSettings({ systemPrompt: rest });
      await bot.sendMessage(msg.chat.id, "‚úÖ System prompt –æ–±–Ω–æ–≤–ª—ë–Ω.", {
        reply_to_message_id: msg.message_id,
      });
      return;
    }

    /* ---------------------------------------------------------------- */
    /* /cooldown */
    if (cmd === "/cooldown") {
      const settings = await getSettings();

      if (!rest) {
        await bot.sendMessage(
          msg.chat.id,
          `‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π COOLDOWN_MS: <code>${settings.cooldownMs}</code>`,
          { reply_to_message_id: msg.message_id, parse_mode: "HTML" }
        );
        return;
      }

      const value = Number(rest);
      if (!Number.isFinite(value) || value < 0) {
        await bot.sendMessage(
          msg.chat.id,
          "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥, –Ω–∞–ø—Ä. /cooldown 300000",
          { reply_to_message_id: msg.message_id }
        );
        return;
      }

      await patchSettings({ cooldownMs: value });
      await bot.sendMessage(
        msg.chat.id,
        `‚úÖ COOLDOWN_MS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>${value}</code>`,
        { reply_to_message_id: msg.message_id, parse_mode: "HTML" }
      );
      return;
    }
  });

  bot.on("callback_query", async (cq) => {
    if (cq.from.id !== ADMIN_CHAT_ID) return; // –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

    const data = cq.data ?? "";
    if (!data.startsWith("setModel:")) return;

    const requested = data.slice("setModel:".length);
    try {
      // await pingModel(requested);
      await patchSettings({ model: requested });

      await bot.editMessageText(
        `‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <code>${escapeHtml(requested)}</code>`,
        {
          chat_id: cq.message!.chat.id,
          message_id: cq.message!.message_id,
          parse_mode: "HTML",
        }
      );
      await bot.answerCallbackQuery(cq.id, { text: "–ì–æ—Ç–æ–≤–æ!" });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏:", err);
      await bot.answerCallbackQuery(cq.id, {
        text: `–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${requested}`,
        show_alert: true,
      });
    }
  });
}
