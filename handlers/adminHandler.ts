import TelegramBot from "node-telegram-bot-api";
import type { Message } from "node-telegram-bot-api";
import {
  ADMIN_CHAT_ID,
  getCurrentModel,
  setCurrentModel,
  API_URL,
} from "../config";
import fetch from "node-fetch";
import type {
  OpenAIChatCompletionRequest,
  OpenAIChatCompletionResponse,
} from "../types";
import { escapeHtml } from "../utils";


export default function adminHandler(bot: TelegramBot) {
  bot.on("message", async (msg: Message) => {
    // –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –∞–¥–º–∏–Ω–∞
    if (msg.chat.id !== ADMIN_CHAT_ID) return;

    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –≤–∏–¥–µ–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ file_id
    if (msg.video || msg.document) {
      await bot.sendMessage(
        msg.chat.id,
        `üìé file_id: <code>${escapeHtml(msg.video?.file_id || msg.document?.file_id || 'no file')}</code>`,
        {
          reply_to_message_id: msg.message_id,
          parse_mode: "HTML",
        }
      );
      return;
    }

    // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏
    if (msg.text) {
      const requestedModel = msg.text.trim();
      if (!requestedModel) return;

      const previousModel = getCurrentModel();
      setCurrentModel(requestedModel);

      try {
        // –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å ¬´ping¬ª
        const testBody: OpenAIChatCompletionRequest = {
          model: requestedModel,
          messages: [
            {
              role: "user",
              content: "ping",
            },
          ],
          stream: false,
        };

        const res = await fetch(`${API_URL}chat/completions`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          },
          body: JSON.stringify(testBody),
        });

        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${await res.text()}`);
        }

        const _json = (await res.json()) as
          | OpenAIChatCompletionResponse
          | { error: string };

        if ("error" in _json) {
          throw new Error(_json.error);
        }

        await bot.sendMessage(
          msg.chat.id,
          `‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>${escapeHtml(
            requestedModel
          )}</code>`,
          {
            reply_to_message_id: msg.message_id,
            parse_mode: "HTML",
          }
        );
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏:", err);
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏
        setCurrentModel(previousModel);

        await bot.sendMessage(
          msg.chat.id,
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å <code>${escapeHtml(
            requestedModel
          )}</code>. –û—Å—Ç–∞—é—Å—å –Ω–∞ <code>${escapeHtml(previousModel)}</code>`,
          {
            reply_to_message_id: msg.message_id,
            parse_mode: "HTML",
          }
        );
      }
    }
  });
}
