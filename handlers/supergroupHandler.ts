import TelegramBot from "node-telegram-bot-api";
import type { Message, PhotoSize, Document } from "node-telegram-bot-api";
import type { RequestInit }  from "node-fetch";
import fetch from "node-fetch";
import type {
  OpenAIChatCompletionRequest,
  OpenAIChatCompletionResponse,
} from "../types";
import { API_URL, getCurrentModel, getSystemPrompt } from "../config"; // ‚ú® –¥–æ–±–∞–≤–∏–ª–∏ getSystemPrompt
import { escapeV2, extractImage, log } from "../utils";
import { saveMessage, getChatHistory, findMessageById } from "../db";

/**
 * –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ ¬´–∑–∞–≤–∏—Å–∞–µ—Ç¬ª –±–æ—Ç.
 * –í—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–æ–ª–≥–∏–µ/–æ–ø–∞—Å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ –æ–±—ë—Ä–Ω—É—Ç—ã –≤ try/catch –∏ —Å–Ω–∞–±–∂–µ–Ω—ã console.time.
 * –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å ¬´–±–æ–ª—Ç–æ–≤–Ω—é¬ª, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DEBUG_BOT=false.
 */

/**
 * –ö–æ–Ω—Ñ–∏–≥urable timeout (ms) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI. –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî 3¬†–º–∏–Ω—É—Ç—ã.
 */
const OPENAI_TIMEOUT_MS = parseInt(process.env.OPENAI_TIMEOUT ?? "180000", 10);


export default function supergroupHandler(bot: TelegramBot) {
  bot.on("message", async (msg: Message) => {
    log("‚Äî New message ‚Äî", {
      chatId: msg.chat.id,
      msgId: msg.message_id,
      text: msg.text || msg.caption,
    });

    try {
      await saveMessage(msg);
    } catch (dbErr) {
      console.error("DB save error", dbErr);
    }

    try {
      console.time("handler_total");

      const chatId = msg.chat.id;
      const threadId = msg.message_thread_id || null;
      const me = await bot.getMe();

      const isChannelDiscussionPost =
        msg.chat.type === "supergroup" && chatId < 0 && threadId === null;
      const isAnonymousChannelMessage =
        !!msg.sender_chat && msg.sender_chat.type === "channel";
      const isReplyToMe = msg.reply_to_message?.from?.id === me.id;

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–º–æ–π –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ—ë linked_chat_id
      log("Fetching group chat info‚Ä¶");
      const groupChat = await bot.getChat(msg.chat.id);
      const linkedChatId = (groupChat as any).linked_chat_id;
      log("linkedChatId", linkedChatId);

      const textContent = msg.text || msg.caption || "";
      const directAsk = textContent.toLowerCase().startsWith("–±–æ—Ç");
      if (
        (!linkedChatId || msg.sender_chat?.id !== linkedChatId) &&
        !directAsk &&
        !isReplyToMe
      ) {
        log("Not addressed to bot, skipping.");
        return;
      }
      

      console.time("extract_image");
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Å–∞–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      let base64DataUrl: string | null = await extractImage(msg, bot);
      // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
      if (!base64DataUrl && msg.reply_to_message) {
        base64DataUrl = await extractImage(msg.reply_to_message, bot);
      }
      console.timeEnd("extract_image");
      log("base64DataUrl present?", !!base64DataUrl);

      const SYSTEM_PROMPT = await getSystemPrompt();

      const history = await getChatHistory(msg.chat.id, 10);
      // –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ chat‚Äëcompletion
      const messages: any[] = [{ role: "system", content: SYSTEM_PROMPT }];

      for (const h of history.reverse()) {
        console.log("–ê–≤—Ç–æ—Ä: ", h.authorName);
        const role = h.fromId === me.id ? "assistant" : "user";
        let payloadText =
          role === "user" && h.authorName
            ? `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º ${h.authorName} –ø–∏—à–µ—Ç: ${h.text ?? ""}`
            : h.text ?? "";

        if (h.raw.reply_to_message) {
          const parentId = h.raw.reply_to_message.message_id;
          const parentDoc = await findMessageById(chatId, parentId);

          if (parentDoc?.text) {
            const who = parentDoc.authorName ?? "–°–æ–æ–±—â–µ–Ω–∏–µ";
            payloadText =
              payloadText + `. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${who}:\n¬´${parentDoc.text}¬ª\n\n`
          }
        }
        messages.push({ role, content: payloadText });
      }

      if (base64DataUrl) {
        messages.push({
          role: "user",
          content: [
            { type: "text", text: textContent || "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" },
            { type: "image_url", image_url: { url: base64DataUrl } },
          ],
        });
      } 

      log("Messages for OpenAI", messages);

      const needLLM =
        (isChannelDiscussionPost && isAnonymousChannelMessage) ||
        directAsk ||
        isReplyToMe;

      if (!needLLM) {
        log("No need to call LLM (conditions not met)");
        return;
      }

      // –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é üëÄ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
      try {
        const reaction = [{ type: "emoji", emoji: "üëÄ" }];
        // @ts-ignore
        await bot.setMessageReaction(chatId, msg.message_id, { reaction: JSON.stringify(reaction) });
      } catch (reactionErr) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é", reactionErr);
      }

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
      const requestBody: OpenAIChatCompletionRequest = {
        model: await getCurrentModel(),
        messages,
        stream: false,
      };

      log(`Requesting OpenAI (timeout ${OPENAI_TIMEOUT_MS}ms)‚Ä¶`);
      console.time("openai_fetch");
      let replyText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API";
      try {
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), OPENAI_TIMEOUT_MS);

        const fetchOptions: RequestInit = {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          },
          body: JSON.stringify(requestBody),
          signal: controller.signal,
        };

        const response = await fetch(`${API_URL}chat/completions`, fetchOptions);
        clearTimeout(timeout);
        console.timeEnd("openai_fetch");

        if (!response.ok) {
          const errTxt = await response.text();
          throw new Error(`OpenAI HTTP ${response.status}: ${errTxt}`);
        }

        const data = (await response.json()) as OpenAIChatCompletionResponse;
        replyText = data?.choices?.[0]?.message?.content || replyText;
      } catch (fetchErr: any) {
        if (fetchErr.name === "AbortError") {
          fetchErr.message = `–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ${OPENAI_TIMEOUT_MS / 1000}s`;
        }
        console.error("OpenAI fetch error", fetchErr);
        replyText += ` (–æ—à–∏–±–∫–∞: ${fetchErr.message})`;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      try {
        const botReply = await bot.sendMessage(chatId, escapeV2(replyText), {
          reply_to_message_id: msg.message_id,
          parse_mode: "MarkdownV2",
        });

        try {
          await saveMessage(botReply);          // —Ç–µ–ø–µ—Ä—å –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª–Ω–∞—è
        } catch (dbErr) {
          console.error("DB save error (bot reply)", dbErr);
        }
      } catch (sendErr) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", sendErr);
      }

      console.timeEnd("handler_total");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (outer)", err);
    }
  });
}
