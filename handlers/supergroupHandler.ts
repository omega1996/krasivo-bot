import TelegramBot from "node-telegram-bot-api";
import type { Message, PhotoSize, Document } from "node-telegram-bot-api";
import type { RequestInit } from "node-fetch";
import fetch from "node-fetch";
import type {
  OpenAIChatCompletionRequest,
  OpenAIChatCompletionResponse,
} from "../types";
import { API_URL, getCurrentModel, getSystemPrompt } from "../config"; // ‚ú® –¥–æ–±–∞–≤–∏–ª–∏ getSystemPrompt
import { escapeV2, extractImage, log } from "../utils";
import {
  saveMessage,
  getChatHistory,
  findMessageById,
  getTodayStats,
} from "../db";
import { openai } from "../utils/openai";

export default function supergroupHandler(bot: TelegramBot) {
  bot.on("message", async (msg: Message) => {
    log("‚Äî New message ‚Äî", {
      chatId: msg.chat.id,
      msgId: msg.message_id,
      text: msg.text || msg.caption,
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
    if (msg.text && msg.text.startsWith("/stats")) {
      try {
        const stats = await getTodayStats(msg.chat.id);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const topUsers = stats.userStats.slice(0, 3);

        let topUsersText = "–¢–æ–ø-3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
        if (topUsers.length === 0) {
          topUsersText += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–∏—Å–∞–ª üò¥";
        } else {
          topUsers.forEach((user, index) => {
            const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : "ü•â";
            topUsersText += `${medal} ${user.userName}: ${user.messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n`;
          });
        }

        const statsText =
          "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" +
          `–°–æ–æ–±—â–µ–Ω–∏–π: ${stats.totalMessages}\n` +
          `–°—Ç–∏–∫–µ—Ä–æ–≤: ${stats.stickers}\n` +
          `–ì–∏—Ñ–æ–∫: ${stats.gifs}\n` +
          `–§–æ—Ç–æ: ${stats.photos}\n` +
          `–í–∏–¥–µ–æ: ${stats.videos}\n\n` +
          topUsersText;

        await bot.sendMessage(msg.chat.id, statsText, {
          reply_to_message_id: msg.message_id,
        });
        return;
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err);
        await bot.sendMessage(
          msg.chat.id,
          "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
          { reply_to_message_id: msg.message_id }
        );
        return;
      }
    }

    try {
      await saveMessage(msg);
    } catch (dbErr) {
      console.error("DB save error", dbErr);
    }

    try {
      console.time("handler_total");

      const chatId = msg.chat.id;
      const threadId = msg.message_thread_id || null;
      const me = await bot.getMe();

      const isChannelDiscussionPost =
        msg.chat.type === "supergroup" && chatId < 0 && threadId === null;
      const isAnonymousChannelMessage =
        !!msg.sender_chat && msg.sender_chat.type === "channel";
      const isReplyToMe = msg.reply_to_message?.from?.id === me.id;

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–º–æ–π –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ—ë linked_chat_id
      log("Fetching group chat info‚Ä¶");
      const groupChat = await bot.getChat(msg.chat.id);
      const linkedChatId = (groupChat as any).linked_chat_id;
      log("linkedChatId", linkedChatId);

      const textContent = msg.text || msg.caption || "";
      const directAsk = textContent.toLowerCase().startsWith("–±–æ—Ç");
      if (
        (!linkedChatId || msg.sender_chat?.id !== linkedChatId) &&
        !directAsk &&
        !isReplyToMe
      ) {
        log("Not addressed to bot, skipping.");
        return;
      }

      console.time("extract_image");
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Å–∞–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      let base64DataUrl: string | null = await extractImage(msg, bot);
      // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
      if (!base64DataUrl && msg.reply_to_message) {
        base64DataUrl = await extractImage(msg.reply_to_message, bot);
      }
      console.timeEnd("extract_image");
      log("base64DataUrl present?", !!base64DataUrl);

      const SYSTEM_PROMPT = await getSystemPrompt();

      const history = await getChatHistory(msg.chat.id, 10);
      // –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ chat‚Äëcompletion
      const messages: any[] = [{ role: "system", content: SYSTEM_PROMPT }];

      for (const h of history.reverse()) {
        console.log("–ê–≤—Ç–æ—Ä: ", h.authorName);
        const role = h.fromId === me.id ? "assistant" : "user";
        let payloadText =
          role === "user" && h.authorName
            ? `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º ${h.authorName} –ø–∏—à–µ—Ç: ${h.text ?? ""}`
            : h.text ?? "";

        if (h.raw.reply_to_message) {
          const parentId = h.raw.reply_to_message.message_id;
          const parentDoc = await findMessageById(chatId, parentId);

          if (parentDoc?.text) {
            const who = parentDoc.authorName ?? "–°–æ–æ–±—â–µ–Ω–∏–µ";
            payloadText =
              payloadText +
              `. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${who}:\n¬´${parentDoc.text}¬ª\n\n`;
          }
        }
        messages.push({ role, content: payloadText });
      }

      if (base64DataUrl) {
        messages.push({
          role: "user",
          content: [
            { type: "text", text: textContent || "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" },
            { type: "image_url", image_url: { url: base64DataUrl } },
          ],
        });
      }

      log("Messages for OpenAI", messages);

      const needLLM =
        (isChannelDiscussionPost && isAnonymousChannelMessage) ||
        directAsk ||
        isReplyToMe;

      if (!needLLM) {
        log("No need to call LLM (conditions not met)");
        return;
      }

      // –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é üëÄ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
      try {
        const reaction = [{ type: "emoji", emoji: "üëÄ" }];
        // @ts-ignore
        await bot.setMessageReaction(chatId, msg.message_id, {
          reaction: JSON.stringify(reaction),
        });
      } catch (reactionErr) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é", reactionErr);
      }

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI

      let replyText = "–¢—Å—Å—Å—Å, —è —Å–ø–ª—é, –Ω–µ –±—É–¥–∏";
      try {
        const stream = await openai.chat.completions.create({
          model: await getCurrentModel(),
          messages,
          stream: true,
        });

        for await (const chunk of stream) {
          const token = chunk.choices?.[0]?.delta?.content;
          console.log("token", token);
          if (token) replyText += token;
        }
      } catch (fetchErr: any) {
        console.error("OpenAI fetch error", fetchErr);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if (
          fetchErr.name === "APIConnectionTimeoutError" ||
          fetchErr.message?.includes("timeout")
        ) {
          replyText =
            "‚è∞ –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        } else if (fetchErr.status === 429) {
          replyText =
            "üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        } else if (fetchErr.status === 401) {
          replyText =
            "üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
        } else if (fetchErr.status >= 500) {
          replyText = "üîß –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        } else {
          replyText =
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      try {
        const botReply = await bot.sendMessage(chatId, escapeV2(replyText), {
          reply_to_message_id: msg.message_id,
          parse_mode: "MarkdownV2",
        });

        try {
          await saveMessage(botReply); // —Ç–µ–ø–µ—Ä—å –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª–Ω–∞—è
        } catch (dbErr) {
          console.error("DB save error (bot reply)", dbErr);
        }
      } catch (sendErr) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", sendErr);
      }

      console.timeEnd("handler_total");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (outer)", err);
    }
  });
}
